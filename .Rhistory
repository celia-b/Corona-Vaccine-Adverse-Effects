top_20_vec <- symptoms %>%
pivot_longer(cols = -VAERS_ID,
names_to = "symptom_n",
values_to = "symptom",
values_drop_na = TRUE) %>% # get all symptoms into one column
select(VAERS_ID, symptom) %>%
group_by(symptom) %>%
count(sort = TRUE) %>% # count symptom occurrence, sort by highest occurrence
head(20) %>%
pull(symptom) # convert symptoms column from tibble into vector
top_20_vec
symptoms %>%
pivot_longer(cols = -VAERS_ID,
names_to = "symptom_n",
values_to = "symptom",
values_drop_na = TRUE)
symptoms %>%
pivot_longer(cols = -VAERS_ID)
symptoms %>%
pivot_longer(cols = -VAERS_ID) %>% # get all symptoms into one column
filter(value %in% top_20_vec) %>% # Filter out IDs with any of the top 20 symptoms
mutate(name = TRUE)
symptoms %>%
pivot_longer(cols = -VAERS_ID) %>% # get all symptoms into one column
filter(value %in% top_20_vec) %>% # Filter out IDs with any of the top 20 symptoms
mutate(name = TRUE) %>% # create column with values TRUE
drop_na(value) %>%
pivot_wider(id_cols = VAERS_ID,
names_from = value,
values_from = name,
values_fill = FALSE)
symptoms %>%
select(VAERS_ID)
symptoms %>%
select(VAERS_ID) %>%
distinct(VAERS_ID) %>% # remove repeated IDs
full_join(.,
top_20_symptoms) %>% # join tibble with all IDs with symptoms tibble
replace(.,
is.na(.),
FALSE) %>% # convert NAs to FALSE
view()
# Reintroduce individuals with none of the top 20 symptoms which were filtered out above
symptoms_all_IDs <- symptoms %>%
select(VAERS_ID) %>%
distinct(VAERS_ID) %>% # remove repeated IDs
full_join(.,
top_20_symptoms) %>% # join tibble with all IDs with symptoms tibble
replace(.,
is.na(.),
FALSE) %>% # convert NAs to FALSE
view()
symptoms <- read_csv(file = "data/01_symptoms.csv")
################################## SYMPTOMS ##################################
# Remove symptom versions
symptoms <- symptoms %>%
select(VAERS_ID, SYMPTOM1, SYMPTOM2, SYMPTOM3, SYMPTOM4, SYMPTOM5)
# Extract the 20 symptoms that most commonly occur
top_20_vec <- symptoms %>%
pivot_longer(cols = -VAERS_ID,
names_to = "symptom_n",
values_to = "symptom",
values_drop_na = TRUE) %>% # get all symptoms into one column
select(VAERS_ID, symptom) %>%
group_by(symptom) %>%
count(sort = TRUE) %>% # count symptom occurrence, sort by highest occurrence
head(20) %>%
pull(symptom) # convert symptoms column from tibble into vector
top_20_vec
# Filter out individuals that have a least one of the top 20 symptoms.
# Make tibble with columns VAERS_ID for these individuals and each of the top 20 symptoms.
# Fill tibble with TRUE/FALSE depending on whether the individual has symptom.
top_20_symptoms <- symptoms %>%
pivot_longer(cols = -VAERS_ID) %>% # get all symptoms into one column
filter(value %in% top_20_vec) %>% # Filter out IDs with any of the top 20 symptoms
mutate(name = TRUE) %>% # create column with values TRUE
drop_na(value) %>%
pivot_wider(id_cols = VAERS_ID,
names_from = value,
values_from = name,
values_fill = FALSE) %>% # convert symptoms into column names and TRUE into values
# and give symptom value FALSE if empty
view()
symptoms %>%
pivot_longer(cols = -VAERS_ID) %>% # get all symptoms into one column
filter(value %in% top_20_vec)
symptoms %>%
pivot_longer(cols = -VAERS_ID) %>% # get all symptoms into one column
filter(value %in% top_20_vec) %>% # Filter out IDs with any of the top 20 symptoms
mutate(name = TRUE)
symptoms %>%
pivot_longer(cols = -VAERS_ID) %>% # get all symptoms into one column
filter(value %in% top_20_vec) %>% # Filter out IDs with any of the top 20 symptoms
mutate(name = TRUE) %>% # create column with values TRUE
drop_na(value) %>%
pivot_wider(id_cols = VAERS_ID,
names_from = value,
values_from = name,
values_fill = FALSE)
# Make new column containing total number of symptoms each individual has
symptom_counts <- symptoms %>%
pivot_longer(cols = -VAERS_ID,
names_to = "symptom num",
values_to = "symptom",
values_drop_na = TRUE) %>% # get all symptoms into one column
select(VAERS_ID,
symptom) %>%
group_by(VAERS_ID) %>%
count(sort = FALSE) %>%
rename(n_symptoms = n) %>%
view()
symptoms %>%
pivot_longer(cols = -VAERS_ID,
names_to = "symptom num",
values_to = "symptom",
values_drop_na = TRUE)
# Join tibble containing total number of symptoms with tibble containing patient symptoms
symptoms_clean <- symptom_counts %>%
select(VAERS_ID,
n_symptoms) %>%
full_join(.,
symptoms_all_IDs) %>% # join tibble with all IDs
setNames(gsub(" ", "_", names(.))) %>% # replace all spaces in column names with _
view()
# Write data --------------------------------------------------------------
write_tsv(x = symptoms,
file = "data/02_symptoms_clean.tsv")
symptoms <- read_csv(file = "data/01_symptoms.csv")
# Write data --------------------------------------------------------------
write_tsv(x = symptoms,
file = "data/02_symptoms_clean.tsv")
symptoms_clean <- read_csv(file = "data/02_symptoms_clean.csv")
# Write data --------------------------------------------------------------
write_tsv(x = symptoms,
file = "data/02_symptoms_clean.csv")
symptoms_clean <- read_csv(file = "data/02_symptoms_clean.csv")
# Clear workspace ---------------------------------------------------------
rm(list = ls())
# Load libraries ----------------------------------------------------------
library("tidyverse")
symptoms <- read_csv(file = "data/01_symptoms.csv")
symptoms <- read_csv(file = "data/01_symptoms.csv")
# Write data --------------------------------------------------------------
write_tsv(x = symptoms,
file = "data/02_symptoms_clean.csv")
symptoms_clean <- read_csv(file = "data/02_symptoms_clean.csv")
################################## SYMPTOMS ##################################
# Remove symptom versions
symptoms_clean <- symptoms_clean %>%
select(VAERS_ID, SYMPTOM1, SYMPTOM2, SYMPTOM3, SYMPTOM4, SYMPTOM5)
symptoms_clean <- read_csv(file = "data/02_symptoms_clean.csv")
# Clear workspace ---------------------------------------------------------
rm(list = ls())
# Load libraries ----------------------------------------------------------
library("tidyverse")
# Define functions --------------------------------------------------------
source(file = "R/99_project_functions.R")
patients_raw <- read_csv(file = "data/_raw/2021VAERSDATA.csv",
col_types = cols("BIRTH_DEFECT" = col_character(),
"X_STAY" = col_character(),
"RPT_DATE" = col_date(format="%m/%d/%Y"),
"V_FUNDBY" = col_character(),
"ER_VISIT" = col_character()),
na = c("", " ",
"NA", "N/A", "na", "Na", "n/a", "N/a",
"None", "none", "None.", "NONE",
"unknown", "Unknown", "UNKNOWN",
"NO KNOWN", "no known", "No known", "No Known",
"None known", "none known", "NONE KNOWN", "None Known",
"None reported", "Not applicable",
"No", "NO", "no")) # There is also "no", but that might interfere with certain columns where we do want yes/no --> change them to Y/N
symptoms_raw <- read_csv(file = "data/_raw/2021VAERSSYMPTOMS.csv")
symptoms <- symptoms_raw
write_csv(x = symptoms,
file = "data/01_symptoms.csv")
# Clear workspace ---------------------------------------------------------
rm(list = ls())
# Load libraries ----------------------------------------------------------
library("tidyverse")
symptoms <- read_csv(file = "data/01_symptoms.csv")
# Write data --------------------------------------------------------------
write_csv(x = symptoms,
file = "data/02_symptoms_clean.csv")
symptoms_clean <- read_csv(file = "data/02_symptoms_clean.csv")
################################## SYMPTOMS ##################################
# Remove symptom versions
symptoms_clean <- symptoms_clean %>%
select(VAERS_ID, SYMPTOM1, SYMPTOM2, SYMPTOM3, SYMPTOM4, SYMPTOM5)
# Extract the 20 symptoms that most commonly occur
top_20_vec <- symptoms_clean %>%
pivot_longer(cols = -VAERS_ID,
names_to = "symptom_n",
values_to = "symptom",
values_drop_na = TRUE) %>% # get all symptoms into one column
select(VAERS_ID, symptom) %>%
group_by(symptom) %>%
count(sort = TRUE) %>% # count symptom occurrence, sort by highest occurrence
head(20) %>%
pull(symptom) # convert symptoms column from tibble into vector
# Filter out individuals that have a least one of the top 20 symptoms.
# Make tibble with columns VAERS_ID for these individuals and each of the top 20 symptoms.
# Fill tibble with TRUE/FALSE depending on whether the individual has symptom.
top_20_symptoms <- symptoms_clean %>%
pivot_longer(cols = -VAERS_ID) %>% # get all symptoms into one column
filter(value %in% top_20_vec) %>% # Filter out IDs with any of the top 20 symptoms
mutate(name = TRUE) %>% # create column with values TRUE
drop_na(value) %>%
pivot_wider(id_cols = VAERS_ID,
names_from = value,
values_from = name,
values_fill = FALSE) %>% # convert symptoms into column names and TRUE into values.
# Give symptom value FALSE if empty
view()
# Reintroduce individuals with none of the top 20 symptoms which were filtered out above
symptoms_all_IDs <- symptoms_clean %>%
select(VAERS_ID) %>%
distinct(VAERS_ID) %>% # remove repeated IDs
full_join(.,
top_20_symptoms) %>% # join tibble with all IDs with symptoms tibble
replace(.,
is.na(.),
FALSE) %>% # convert NAs to FALSE
view()
# Make new column containing total number of symptoms each individual has
symptom_counts <- symptoms_clean %>%
pivot_longer(cols = -VAERS_ID,
names_to = "symptom num",
values_to = "symptom",
values_drop_na = TRUE) %>% # get all symptoms into one column
select(VAERS_ID,
symptom) %>%
group_by(VAERS_ID) %>%
count(sort = FALSE) %>%
rename(n_symptoms = n) %>%
view()
# Join tibble containing total number of symptoms with tibble containing symptom columns
symptoms_clean_aug <- symptom_counts %>%
select(VAERS_ID,
n_symptoms) %>%
full_join(.,
symptoms_all_IDs) %>% # join tibble with all IDs
setNames(gsub(" ", "_", names(.))) %>% # replace all spaces in column names with _
view()
write_csv(x = symptoms_clean_aug,
file = "data/03_symptoms_clean_aug.csv")
symptoms_clean <- read_csv(file = "data/02_symptoms_clean.csv")
symptoms_clean <- read_csv(file = "data/02_symptoms_clean.csv")
symptoms_clean
view(symptoms_clean)
################################## SYMPTOMS ##################################
# Remove symptom versions
symptoms_clean <- symptoms_clean %>%
select(VAERS_ID, SYMPTOM1, SYMPTOM2, SYMPTOM3, SYMPTOM4, SYMPTOM5)
# Extract the 20 symptoms that most commonly occur
top_20_vec <- symptoms_clean %>%
pivot_longer(cols = -VAERS_ID,
names_to = "symptom_n",
values_to = "symptom",
values_drop_na = TRUE) %>% # get all symptoms into one column
select(VAERS_ID, symptom) %>%
group_by(symptom) %>%
count(sort = TRUE) %>% # count symptom occurrence, sort by highest occurrence
head(20) %>%
pull(symptom) # convert symptoms column from tibble into vector
# Filter out individuals that have a least one of the top 20 symptoms.
# Make tibble with columns VAERS_ID for these individuals and each of the top 20 symptoms.
# Fill tibble with TRUE/FALSE depending on whether the individual has symptom.
top_20_symptoms <- symptoms_clean %>%
pivot_longer(cols = -VAERS_ID) %>% # get all symptoms into one column
filter(value %in% top_20_vec) %>% # Filter out IDs with any of the top 20 symptoms
mutate(name = TRUE) %>% # create column with values TRUE
drop_na(value) %>%
pivot_wider(id_cols = VAERS_ID,
names_from = value,
values_from = name,
values_fill = FALSE) # convert symptoms into column names and TRUE into values.
# Reintroduce individuals with none of the top 20 symptoms which were filtered out above
symptoms_all_IDs <- symptoms_clean %>%
select(VAERS_ID) %>%
distinct(VAERS_ID) %>% # remove repeated IDs
full_join(.,
top_20_symptoms) %>% # join tibble with all IDs with symptoms tibble
replace(.,
is.na(.),
FALSE) # convert NAs to FALSE
# Make new column containing total number of symptoms each individual has
symptom_counts <- symptoms_clean %>%
pivot_longer(cols = -VAERS_ID,
names_to = "symptom num",
values_to = "symptom",
values_drop_na = TRUE) %>% # get all symptoms into one column
select(VAERS_ID,
symptom) %>%
group_by(VAERS_ID) %>%
count(sort = FALSE) %>%
rename(n_symptoms = n)
# Join tibble containing total number of symptoms with tibble containing symptom columns
symptoms_clean_aug <- symptom_counts %>%
select(VAERS_ID,
n_symptoms) %>%
full_join(.,
symptoms_all_IDs) %>% # join tibble with all IDs
setNames(gsub(" ", "_", names(.))) # replace all spaces in column names with _
# Join tibble containing total number of symptoms with tibble containing symptom columns
symptoms_clean_aug <- symptom_counts %>%
select(VAERS_ID,
n_symptoms) %>%
full_join(.,
symptoms_all_IDs) %>% # join tibble with all IDs
setNames(gsub(" ", "_", names(.))) %>%
view()# replace all spaces in column names with _
# Clear workspace ---------------------------------------------------------
rm(list = ls())
# Load libraries ----------------------------------------------------------
library("tidyverse")
# Define functions --------------------------------------------------------
source(file = "R/99_project_functions.R")
patients_raw <- read_csv(file = "data/_raw/2021VAERSDATA.csv",
col_types = cols("BIRTH_DEFECT" = col_character(),
"X_STAY" = col_character(),
"RPT_DATE" = col_date(format="%m/%d/%Y"),
"V_FUNDBY" = col_character(),
"ER_VISIT" = col_character()),
na = c("", " ",
"NA", "N/A", "na", "Na", "n/a", "N/a",
"None", "none", "None.", "NONE",
"unknown", "Unknown", "UNKNOWN",
"NO KNOWN", "no known", "No known", "No Known",
"None known", "none known", "NONE KNOWN", "None Known",
"None reported", "Not applicable",
"No", "NO", "no")) # There is also "no", but that might interfere with certain columns where we do want yes/no --> change them to Y/N
symptoms_raw <- read_csv(file = "data/_raw/2021VAERSSYMPTOMS.csv")
vaccines_raw <- read_csv(file = "data/_raw/2021VAERSVAX.csv")
patients <- patients_raw
symptoms <- symptoms_raw
vaccines <- vaccines_raw
# Write data --------------------------------------------------------------
write_csv(x = patients,
file = "data/01_patients.csv")
write_csv(x = symptoms,
file = "data/01_symptoms.csv")
write_csv(x = vaccines,
file = "data/01_vaccines.csv")
# Clear workspace ---------------------------------------------------------
rm(list = ls())
# Load libraries ----------------------------------------------------------
library("tidyverse")
# Load data ---------------------------------------------------------------
patients <- read_csv(file = "data/01_patients.csv",
col_types = cols("BIRTH_DEFECT" = col_character(),
"X_STAY" = col_character(),
"RPT_DATE" = col_date(format="%Y-%m-%d"),
"V_FUNDBY" = col_character(),
"ER_VISIT" = col_character()))
symptoms <- read_csv(file = "data/01_symptoms.csv")
vaccines <- read_csv(file = "data/01_vaccines.csv")
# Write data --------------------------------------------------------------
write_csv(x = symptoms,
file = "data/02_symptoms_clean.csv")
# Clear workspace ---------------------------------------------------------
rm(list = ls())
# Load libraries ----------------------------------------------------------
library("tidyverse")
# Define functions --------------------------------------------------------
source(file = "R/99_project_functions.R")
# Load data ---------------------------------------------------------------
patients_clean <- read_csv(file = "data/02_patients_clean.csv")
symptoms_clean <- read_csv(file = "data/02_symptoms_clean.csv")
view(symptoms_clean)
################################## SYMPTOMS ##################################
# Remove symptom versions
symptoms_clean <- symptoms_clean %>%
select(VAERS_ID, SYMPTOM1, SYMPTOM2, SYMPTOM3, SYMPTOM4, SYMPTOM5)
# Extract the 20 symptoms that most commonly occur
top_20_vec <- symptoms_clean %>%
pivot_longer(cols = -VAERS_ID,
names_to = "symptom_n",
values_to = "symptom",
values_drop_na = TRUE) %>% # get all symptoms into one column
select(VAERS_ID, symptom) %>%
group_by(symptom) %>%
count(sort = TRUE) %>% # count symptom occurrence, sort by highest occurrence
head(20) %>%
pull(symptom) # convert symptoms column from tibble into vector
# Filter out individuals that have a least one of the top 20 symptoms.
# Make tibble with columns VAERS_ID for these individuals and each of the top 20 symptoms.
# Fill tibble with TRUE/FALSE depending on whether the individual has symptom.
top_20_symptoms <- symptoms_clean %>%
pivot_longer(cols = -VAERS_ID) %>% # get all symptoms into one column
filter(value %in% top_20_vec) %>% # Filter out IDs with any of the top 20 symptoms
mutate(name = TRUE) %>% # create column with values TRUE
drop_na(value) %>%
pivot_wider(id_cols = VAERS_ID,
names_from = value,
values_from = name,
values_fill = FALSE) # convert symptoms into column names and TRUE into values.
# Reintroduce individuals with none of the top 20 symptoms which were filtered out above
symptoms_all_IDs <- symptoms_clean %>%
select(VAERS_ID) %>%
distinct(VAERS_ID) %>% # remove repeated IDs
full_join(.,
top_20_symptoms) %>% # join tibble with all IDs with symptoms tibble
replace(.,
is.na(.),
FALSE) # convert NAs to FALSE
# Make new column containing total number of symptoms each individual has
symptom_counts <- symptoms_clean %>%
pivot_longer(cols = -VAERS_ID,
names_to = "symptom num",
values_to = "symptom",
values_drop_na = TRUE) %>% # get all symptoms into one column
select(VAERS_ID,
symptom) %>%
group_by(VAERS_ID) %>%
count(sort = FALSE) %>%
rename(n_symptoms = n)
# Join tibble containing total number of symptoms with tibble containing symptom columns
symptoms_clean_aug <- symptom_counts %>%
select(VAERS_ID,
n_symptoms) %>%
full_join(.,
symptoms_all_IDs) %>% # join tibble with all IDs
setNames(gsub(" ", "_", names(.))) %>%
view()# replace all spaces in column names with _
# Join tibble containing total number of symptoms with tibble containing symptom columns
symptoms_clean_aug <- symptom_counts %>%
select(VAERS_ID,
n_symptoms) %>%
full_join(.,
symptoms_all_IDs) %>% # join tibble with all IDs
setNames(gsub(" ", "_", names(.)), toupper(.)) %>%
view()# replace all spaces in column names with _
# Join tibble containing total number of symptoms with tibble containing symptom columns
symptoms_clean_aug <- symptom_counts %>%
select(VAERS_ID,
n_symptoms) %>%
full_join(.,
symptoms_all_IDs) %>% # join tibble with all IDs
setNames(gsub(" ", "_", names(.)), toupper(names(.))) %>%
view()# replace all spaces in column names with _
# Join tibble containing total number of symptoms with tibble containing symptom columns
symptoms_clean_aug <- symptom_counts %>%
select(VAERS_ID,
n_symptoms) %>%
full_join(.,
symptoms_all_IDs) %>% # join tibble with all IDs
setNames(gsub(" ", "_", names(.))) %>%
toupper(names(.)) %>%
view()# replace all spaces in column names with _
# Join tibble containing total number of symptoms with tibble containing symptom columns
symptoms_clean_aug <- symptom_counts %>%
select(VAERS_ID,
n_symptoms) %>%
full_join(.,
symptoms_all_IDs) %>% # join tibble with all IDs
setNames(gsub(" ", "_", names(.))) %>%
toupper(.) %>%
view()# replace all spaces in column names with _
# Join tibble containing total number of symptoms with tibble containing symptom columns
symptoms_clean_aug <- symptom_counts %>%
select(VAERS_ID,
n_symptoms) %>%
full_join(.,
symptoms_all_IDs) %>% # join tibble with all IDs
setNames(gsub(" ", "_", names(.))) %>%
toupper() %>%
view()# replace all spaces in column names with _
# Join tibble containing total number of symptoms with tibble containing symptom columns
symptoms_clean_aug <- symptom_counts %>%
select(VAERS_ID,
n_symptoms) %>%
full_join(.,
symptoms_all_IDs) %>% # join tibble with all IDs
setNames(gsub(" ", "_", names(.))) %>%
toupper(colnames(.)) %>%
view()# replace all spaces in column names with _
# Join tibble containing total number of symptoms with tibble containing symptom columns
symptoms_clean_aug <- symptom_counts %>%
select(VAERS_ID,
n_symptoms) %>%
full_join(.,
symptoms_all_IDs) %>% # join tibble with all IDs
toupper(names(.)) %>%
setNames(gsub(" ", "_", names(.))) %>%
view()# replace all spaces in column names with _
# Join tibble containing total number of symptoms with tibble containing symptom columns
symptoms_clean_aug <- symptom_counts %>%
select(VAERS_ID,
n_symptoms) %>%
full_join(.,
symptoms_all_IDs) %>% # join tibble with all IDs
toupper(.) %>%
setNames(gsub(" ", "_", names(.))) %>%
view()# replace all spaces in column names with _
# Load libraries ----------------------------------------------------------
library("tidyverse")
symptoms_clean <- read_csv(file = "data/02_symptoms_clean.csv")
################################## SYMPTOMS ##################################
# Remove symptom versions
symptoms_clean <- symptoms_clean %>%
select(VAERS_ID, SYMPTOM1, SYMPTOM2, SYMPTOM3, SYMPTOM4, SYMPTOM5)
# Extract the 20 symptoms that most commonly occur
top_20_vec <- symptoms_clean %>%
pivot_longer(cols = -VAERS_ID,
names_to = "symptom_n",
values_to = "symptom",
values_drop_na = TRUE) %>% # get all symptoms into one column
select(VAERS_ID, symptom) %>%
group_by(symptom) %>%
count(sort = TRUE) %>% # count symptom occurrence, sort by highest occurrence
head(20) %>%
pull(symptom) # convert symptoms column from tibble into vector
